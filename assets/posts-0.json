{"results":[{"_id":"2025-10-03-generating-resumes-with-llm.md","userId":0,"title":"Generating Resum√©s with LLMs","content":"The recipe is simple: Using your own LinkedIn and the Job Listing blended together to generate a good draft of a resum√©.\n\n\n\n**Here are the requirements:**\n\n- Your LinkedIn profile up to date with anything work, education or certification related, as well as personal projects.\n\n- Make sure to have a proper introduction on yourself in there!\n\n- Make double sure to include proper detailed description on what you did on your previous/current jobs!\n\n\n\n#### First step - Save your LinkedIn profile as PDF\n\n- Log into your account and go check your public profile:\n\n- Top right corner (Me) > Settings & Privacy > Visibility > [Edit your public profile](https://www.linkedin.com/public-profile/settings).\n- Using the browser's element picker, erase sidebars and anything unrelated to yourself. Make it as clear as possible for the LLM.\n- Download the resulting page as PDF (Ctrl + P)\n\n\n\n#### Second step - Save the job listing as PDF or Markdown.\n\n- Just like in the first step, try making sure only the listing and information regarding it is in the resulting file, thus reducing chances of \n\n\n\n#### Final step - Use a LLM of your choice\n\n- I recommend using Grok with a simple prompt like this: \n\n```\nUsing my LinkedIn profile file attached, generate a resum√© for the job listing (also attached) following these instructions below:\n\n- Do not make up information or experience not mentioned in the LinkedIn file, this must be honest and truthy.\n- It's ok to infer some knowledge, eg. If I know how to use cloud services, then it's ok to assume I know cloud concepts.\n- Prioritize skills and learnings that are beneficial to the role.\n- Make sure to include the description of my previous job roles in detail.\n- Make sure the technical skills section is a markdown list with each item being a category followed by its contents eg. \"Programming languages: A, B, C\" or \"Frameworks & Tools: X, Y, Z.\".\n- Make it aligned with the recruiting team's expectations as far as formatting and professionalism is concerned.\n- In the \"Certifications\" section, only include up to 10 entries with a focus on quality and relevance to the skills required in the job listing.\n\nPrint the resulting resum√© in markdown format so that I can edit later.\n\n```\n\n- This prompt should generate a reasonably good draft to work on.\n\n- You may also ask it to judge the final version of your resum√© using a prompt like this:\n\n```\nIn the role of someone from the talent acquisition team reading my attached resum√©, judge my candidacy based on the attached job listing.\nMake sure to point out things I did right and wrong and how to improve it if necessary.\n```\n\n","hidden":false,"published":"2025-10-03"},{"_id":"2025-10-02-interview-experience-with-hennge.md","userId":0,"title":"My experience with HENNGE and my advices for doing tech interviews for Japanese companies","content":"Consider this as my handy guide on preparing yourself for a possible tech job in Japan!\n\nDespite this being my experience with HENNGE specifically, all the info below is super useful for any other company.\n\nIf you're interested yourself, consider visiting [TokyoDev](https://www.tokyodev.com/) to see statistics, join the community and see job offers like this one I've tried.\n\n\n\n**Disclaimer:**\n\nAll the information in this article is publicly available from their own website and job listing. I'm not sharing anything that was given to me specifically or anything that was \"leaked\" on the internet.\n\n\n\n**Table of contents**\n\n1. How their interview process works?\n2. Do your research about the company!\n3. My tips for technical challenges\n4. My tips for resum√©s\n5. My tips for cover letters\n6. My tips for casual interviews\n7. My tips for technical interviews\n8. My response from HENNGE and why I think I was rejected\n9. Conclusion\n\n\n\n### How their interview process works?\n\nIt consists of few typical steps but in an order I personally enjoyed:\n\n- A 3-step self-paced technical challenge that is fairly easy (Coding, Hosting & Submission)\n- Submission of your Resum√© and a Cover Letter (the later is super important)\n- Casual interview\n- Technical interview\n- Technical team interview\n- CEO interview (which can be technical a bit)\n\nThere's also a personality test and some HR calls inbetween if things are going smoothly.\n\nI recommend checking out  their [blog post about the hiring process](https://hennge.com/global/info/henka/interview/202406-demystifying_hennges_hiring_process/) AND [the company introduction](https://speakerdeck.com/hennge/company-introduction-deck-hennge)  for info - They also share some interesting statistics about how many people apply per position and how many make it to which screening step.\n\n\n\n### Do your research about the company!\n\n**I strongly recommend** you to dive in and learn everything you can about the company, its history, position in the market, the CEO, the products and everything anyone who has worked on it has to say on the topic! Companies these days will have several social media pages such as LinkedIn, their own blog or articles somewhere, Instagram, Youtube and sometimes even discord! Make sure to check these out!\n\n**Having no doubt about the business AND their products will help you wonders during your interview, trust me.**\n\nDoing reputation research is also important as a way to balance out good and bad opinions about the company so you don't find yourself in a place you wouldn't want to be as far as expectations go.\n\n\n\n### My tips for technical challenges\n\nThese are fairly specific from company to company, I strongly recommend doing 1 LeetCode a day or practicing with the technologies you're most familiar with - create projects or improve existing ones (which are great ways for expanding your portfolio in the process).\n\nHere are some suggestions for the challenges themselves, specifically self-paced ones:\n\n- **Read the instructions as many times as you need**, pay attention to the wording of what is required and expected. This is easily overlooked!\n- Pay attention to the constraints and if your code should handle edge-cases/exceptions! I personally only handle if they specify the expected behavior, otherwise I just add a comment on the matter!\n- Use clean code principles: Appropriate naming for functions and variables, good use of parameters, well defined functions, and so on!\n- A well-written doc-string/documentation - Don't leave doubts about the method, parameters, outputs and its caveats!\n- Use type hinting in Python, it's a must these days!\n- Don't over-engineer something that can be simple! It's less prone for failure/mistakes down the line! No one wants to deal with code no one can easily understand or predict!\n- Make sure to use the language's set of good practices and safety measures (basic stuff as how to properly initialize and deal with variables, limitations and so on)\n- Make unit tests in case you're given examples of inputs and outputs!\n- Use Linters/Static code analyzers such as Pylint, Flake8, Mypy, etc...\n- Use code formatters such as Black, isort, autopep8, etc...\n- Test your solution and double check for any detail that you might have missed!\n\nKeep in mind **your submission is a \"sample\" of how well your code is structured and maintainable within their codebase as well as your ability to interpret a task**. None wants poor solutions, badly written spaghetti code with no documentation whatsoever! The use of the tools I mentioned will greatly showcase your expertise and maturity working with real world codebases.\n\nIt's also important to **learn about the solution** you copied or came up with. You must be ready to explain in great detail questions such as:\n\n- How did you start working on this challenge?\n- Can you explain the algorithm or solution you used to resolve the challenge?\n\nIt's no use to write code you don't understand or can't explain to a coworker or even junior developer. It's not a problem to copy solutions that are known to work and are reliable as long as you know why.\n\nYou can try using LLMs to help you judge your code before submission using the challenge itself as context. Here's a sample prompt that worked well for me using Grok:\n```\nIn the role of a senior software engineer that is in charge of evaluating my coding challenge submission, make a list of assertions on the things I did right and the things I did wrong and how to improve it.\n\nUse the attached challenge and submission files for context.\n```\n\nIt also works well for suggesting improvements but **make sure you're the one making the decisions** since LLMs tend to go overboard with its analysis.\n\n\n\n### My tips for Resum√©s\n\nJapanese companies hiring abroad will likely be accepting western-style resum√©s so there's no secret here. I'll just reiterate on some obvious points and how I crafted my own resum√© painlessly.\n\n- Make sure to tailor it specifically for the job role, including skills and experiences that correlate to what the company is looking for.\n- Make sure to include your Github and LinkedIn. It's ok to add a third link for your own blog or something relevant like LeetCode.\n- Make sure your roles are well detailed and explained from current/previous jobs, this is a key interest for the hiring team.\n\n\n\nMy suggestion for contents and ordering of your resum√©:\n\n- Your name and contact information\n- Professional Summary\n- Professional Experience\n- Education\n- Skills\n- Certifications\n- Projects\n- Languages\n\n\n\n**Want to save time on creating resum√©s?** üí°\n\nI made a dedicated article on how to use your LinkedIn and Grok (or other LLMs) to generate great drafts to work on, thus saving a lot of time in this process!\n\n\n\n### My tips for Cover Letters\n\nAccording to HENNGE's [own article](https://hennge.com/global/info/henka/interview/202403-crafting-the-perfect-cover-letter/) on crafting cover letters, they read each one manually and take deep consideration on the content when making the decision on moving you to the next stage.\n\n- I used a similar prompt from the Resum√© step but instead asked for generating a cover letter (including the job listing AND their article for reference). It was my first time making a cover letter so I needed some guidance.\n- I used the draft as a guide for rewriting each paragraph's idea with my own thoughts and words since I can do it infinitely better with my knowledge not fully available on my LinkedIn.\n- Again, if you're from abroad, make it clear on why you want to relocate to Japan.\n- Generally, the cover letter consists of a single page or an extra paragraph at most. My paragraphs were written with these ideas respectively:\n  1. The reason why I want to join the company and move to Japan.\n  2. The reason why I think I'm a good candidate for the role listed.\n  3. My achievements and milestones from my experience and how they translate to the company I'm applying.\n  4. Short message thanking for the time and opportunity.\n\n\n\n### My tips for casual interviews\n\nAs far as Japanese etiquette goes for interviews, I was dressing a suit, white shirt and black tie while sitting straight. I don't think the dressing code it's required these days but you never know how traditional the company is regarding this expectation.\n\n\n\nCompanies kindly ask not to share the specific questions being asked - I don't think it's a big deal for a few reasons but I will respect their wish. It's also a no brainer to prepare yourself for some common (should I say expected?) interview questions such as:\n\n\n\n- > Can you briefly introduce yourself?\n\nHere you say your nome, where you're from, your higher education, your past few experiences and current role - You can finish it talking about a few hobbies.\n\n\n\n- > Why did you choose Japan to work in/relocate to?\n\nThis varies from people to people but it's important to make it clear that you're no stranger to Japan's culture and is deeply invested in a long-term relationship with the country and do not plan on leaving soon. Don't be generic or disconnected with reality by saying you just like \"anime\" or \"food\".\n\n\n\n- > Why did you choose our company specifically?\n\nIt's important to have some honest arguments here, such as things that caught your attention, the proposal of a good working place and a role that captivates your motivation. It's important to also align with your career goals - make it clear you want to do this and why.\n\n\n\n- > How's your Japanese level?\n\nWhile fluency is not required, they definitely want someone invested and learning.\n\n\n\n- > Name positive(s) and negative(s) aspect(s) about yourself\n\nThis is where you can shine and be honest about yourself. Don't say you're bad at what you do or that you're a perfectionist for crying out loud.\n\n\n\n- > Do you have any questions about the company?\n\nIt's also a key point to show some genuine interest in the company, its products, the job listing etc. Have at least one!\n\n\n\n\n**Disclaimer:**\n\nAll of these questions are extremely predictable and can be seen in almost any interview if you look up guides and videos about it on the internet. I will not confirm if these questions were in fact asked during my own casual interview, but I can say I was prepared to answer these questions just based on my research as I previously stated. To prove my point, here's few articles with the same questions: [tokyodev](https://www.tokyodev.com/articles/tips-for-interviewing-at-japanese-tech-companies), [japan-dev](https://japan-dev.com/blog/japan-job-interview-questions), [gaijonpot](https://blog.gaijinpot.com/basic-japanese-job-interview-questions/), [surapera](https://blog.surapera.com/en/japanese-job-interview/)\n\n\n\n### My tips for technical interviews\n\nHere's some golden tips:\n\n- Companies sometimes share their tech stack so you can study every single technology in advance. The job listing on itself is already a hint on the most important ones.\n- You can also predict what technologies they must be using based on the description for their product in the job listing. Eg. Databases for storing X data, Containers for running Y applications and so on...\n- If you don't have experience with a specific thing, you may mention or claim how familiar it is with something you use instead.\n\n\n\nThe interviewers are technical seniors so you can imagine the questions will likely be something like this:\n\n- > Brief introduction of yourself \n\n- > Do you know what is `tool` or `concept`?\n\n- > Are you familiar with `tool` or `concept`?\n\n- > Do you have examples of using `tool` or `concept` in the past?\n\n- > How long have you been using `tool` or `concept` for?\n\n- > What are some projects or solutions you're proud of?\n\n- > Do you have any success story or learning from a complicated situation?\n\nHere you can use the STAR method (Situation, Task, Action, Result) as a structure to help you reply to this one.\n\n\n\n**If you don't know something you better be honest about it**, none wants to work with someone dishonest or overly confident.\n\n\n\n**Disclaimer:**\n\nAll of these questions are extremely predictable and can be seen in almost any interview if you look up guides and videos about it on the internet. I will not confirm if these questions were in fact asked during my own casual interview, but I can say I was prepared to answer these questions just based on my research as I previously stated.\n\n\n\n### The response from HENNGE and why I think I was rejected\n\nAfter 2 weeks of no response, I decided to send an email asking if the screening process was still ongoing and few days later I received the most motivational decline I've ever seen - most companies will just say decline right away and that's it.\n\nThe recruiter complimented my background, communication style, professionalism, personality and approach - and said that they wish I could stay in touch and reapply in the future.\n\nThey did mention that **I didn't have the expected expertise with AWS's catalog of products** which is fair enough, despite the fact that **I have expertise with a competitor's catalog of products** - I explained how **they're quite similar and even easily interchangeable** during my interview as a way to redeem myself. But oh well.\n\nI'm quite demanding on myself regarding how I do things - I always want to do my best and show what I'm capable of - I can easily pinpoint few things that could've been lots better:\n\n- I was as nervous as I possibly could unfortunately. This was my first interview for a Japanese company and I did not know if I'd be able to do it.\n- I was quite focused on the Japanese etiquette, fearing I'd make a fool of myself if not done properly.\n- The timezones were brutal on me, so I was naturally tired when these started past midnight.\n- Because I was nervous and tired, my speech fluidity was fairly impacted, I was looking for words and things I didn't want to forget to tell sometimes.\n- I wasn't direct and to the point while answering in one or two occasions, perhaps I was trying to show some correlated/contextual knowledge while trying to answer a simple question.\n- Despite my sincere interest with SecOps, I don't have strong certificates or an awfully specific track record on the matter, such as doing penetration tests and so on.\n- I never deployed or used resources on AWS due to my fear of being charged a ton by accident, so I couldn't say I had experience specifically with it.\n\nAll in all, they're probably used to candidates being extremely nervous so they probably don't mind as long as you're polite, answer questions truthfully and do your best. In that regard, I have to give myself some credit for telling them everything they needed to know and having the experience I worked hard on for myself. It's just a matter of being more prepared the next time around.\n\n\n\n### Conclusion\n\nI'm really really happy with how far I managed to get, I did not even expect to pass the coding exam but now I have reasons to believe I nailed it completely. ^_^\n\nI did spend an awful lot of time preparing myself and researching every single aspect of this experience. I hope this article can serve as a helping guide to be as prepared as one can possibly be to pass on a tech interview for a Japanese company.\n\nIt's hard to quantify hours but **I did spend quite a handful of evenings** after my current job's shift was over to dedicate myself to the process. I don't know how people manage to apply to several jobs at the same time but I understand the frustration that comes from spending so much time in a single listing and just fail nevertheless. Investing on more than job listing is by far the best approach for someone looking to succeed.\n\nI plan on doing few AWS and SecOps related certifications in order to be more up to the expectations and will try again in 9 months. Wish me luck!\n\n","hidden":false,"published":"2025-10-02"},{"_id":"2024-11-20-paradigm-change-in-web-dev.md","userId":0,"title":"Server Side Rendering - The paradigm change in web development","content":"Learning how to make a website requires studying several technologies and how they stitch together - it's no easy feat, to start with backend: \n- Authentication\n- REST API\n- Middlewares\n- Error handling\n- Database (CRUD) / Sessions\n\n...To then start learning the front-end aspect of things:\n\n- HTML\n- CSS\n- NodeJS\n- RXJS\n- Angular and Single Page Applications (SPA)\n\nAnd speaking of Angular alone (which is the first framework/experience I properly had with web applications), I happen to start learning at a time when the web was all about making them behave like full standalone \"applications\" just like a phone app or computer software. It's impressive how with just HTML, CSS and JavaScript this could be accomplished, and alas, things like Electron made way for web applications to be bundled next to native apps in phones and computers. Spotify, VSCode, Discord, just to name a few.\n\nSo what's new? Well, nothing new new. Just that these applications became so complex that bundling all the logic and features on the client side could easily take long to transfer & load the bigger the apps gets. It does make sense - I was planning on adding code highlighting feature to my blog, but it would cost me few mbs of extra library code just for that feature alone. If I had a server rendering, the clients would receive just a fraction of the resulting bundle, eg. The HTML and CSS already baked with the resulting highlights, posts, you name it.\n\nTo SPA's defence, modules can be dynamically loaded and transferred as needed, and my blog makes use of this feature. However, that's not truly enough when competing for the fastest page loading & interaction times.\n\nNow here's the thing about my blog in recent times. None will ever read anything here, ever. Why should I spend my hard earned money and limited free time on paying for domain, server, database just to accomplish so much with Server Side Rendering (SSR)? Nonsense. I stripped all dynamic features (such as making posts, authentication, editing, etc) and made my blog static. I could improve it further by pre-compiling each possible view using SSR during compilation time, but that's a bit overkill.\n\nTo make matters worse, Angular is also recommending to start using \"Standalone Components\" and \"Signals\" instead of modular components and whatever was the alternative to Signals - Inputs and Outputs I imagine - I figure they're working on removing \"zone.js\" as one major dependency of Angular in favor of speed - and that alone requires a LOT of re-learning and changes in this blog that I'm not quite willing to do. I much rather re-write from scratch or work on a new project altogether. What is the benefit of rewriting what can't be seen anyway?\n\nAs of the writing of this blog post, I'm in the beginning of... learning several hours of Angular again, since most of these new features are all alien to me. In fact, web development is the most complex, ever evolving technologies out there. I haven't pushed myself to learn React and or other frameworks because Angular alone already takes most of my off-work time when studying or developing things.\n\nIn conclusion, we're all likely re-learning web dev every 2-3 years. It's incredible how obsolete things get, not to mention the overall maintenance these things need ever so often. I'll try to write my next web app as either a personal card with links OR a simple line graph for my price checker using Angular's new paradigm.\n\nI'm leaving here an awesome post for myself and others who want to understand the technical differences between SPA and SSR\n\n- https://www.joshwcomeau.com/react/server-components/\n- https://angular.dev/guide/signals\n","hidden":false,"published":"2024-11-20"},{"_id":"2024-02-13-pre-compiled-search-engine.md","userId":0,"title":"AI /¬†My notes are well titled, now It's time to search through them!","content":"I just recently used [Codeium](https://codeium.com/) to fix my curiosity of \"AI\" to assist me in my personal coding sessions, and well, it does help with some optimization or suggesting better names but if I didn't know any better it wouldn't be able to write something decent out of it. Overall a fun/productive thing I'll have around for now.\n\nAfter writing down a simple script to save pre-compiled json pages, I now want to find relevant text within my notes. Aka I need a search engine of sorts. I won't really expand too much into it, I might write my own rudimentary one but for now I'll leave this note with some references. Bye! \\\n![worryCoffee](https://cdn.frankerfacez.com/emoticon/350657/2)\n\n- https://www.codementor.io/@rudolfolah/node-js-search-engine-github-s2gh0sfl8","hidden":false,"published":"2024-02-13"},{"_id":"2024-01-18-scrollable-slideing-marquee-text.md","userId":0,"title":"Creating a scrolling text bar effect for special announcements!","content":"Inspired by Let It Die's interface, I wanted to add a scrolling text bar on the top of my homepage whenever I had something important going on that my visitors might want to know. \\\nWhile trying out a few approaches, here's what I learned on each of them:\n\n**1. The < marquee > tag** \\\nCon: Easiest \\\nIssue: It's not smooth & it's deprecated.\n\n**2. CSS animation** \\\nCon: Smooth, code-free \\\nIssue: Animation speed relies on element width/height, longer text = faster\n\n**3. A (bad) JavaScript hack** \\\nIncrementing CSS's \"right: 0px\" element over time \\\nCon: Great control over animation, speed is the same no matter the size of the component. \\\nIssue: Updating \"right\" is not performatic as \"translate\" or similar is. The animation is not that smooth either.\n\n#### So what is the best approach?\nI coded all of the three options but ultimately settled on approach 2 for the sake of smoother and performant experience - I couldn't have done it if not by looking for a few hundred articles out there - Special thanks to this StackOverflow user: [https://stackoverflow.com/a/41958209](https://stackoverflow.com/a/41958209)\n\nThere is a special combination of CSS and JavaScript for horizontally looping images and text, really common for showcasing tools, avatars and so on BUT I'll leave that for a future iteration, I usually prefer simplicity over complexity for something as simple as this.\n","hidden":false,"published":"2024-01-18"},{"_id":"2023-12-04-static-github-pages-with-routing.md","userId":0,"title":"Hosting static Github Pages with routing","content":"After a ton of trial and error, turns out Github fetches urls directly as if fetching files, e.g. \"/posts/some-file\" instead of working like you'd expect in a server running NodeJS/Express for example.\n\nTL;DR\nAdd `{useHash: true}` in app-routing-module.ts\n\nAnd well, there's 2 ways one can deal with this challenge:\n1. Navigate the user using a '#' before routes\n2. Pre-compile page for every possible url, including dynamic ones such as post/:id.\n\nNaturally when looking for my problem with Github Pages, I faced the 2 option more often in Stackoverflow and blog articles alike, and man what a pain it was. Most of them will suggest \"Scully\" which I had in mind from a previous attempt at this, but never tried. At the time of writing this article, their guide did not create any files for me, I even created a brand new project and nothing. Manually configuring worked and I was delighted to see every single possible path in the built version with an index.html at the end of it. Curious like I am, I decided to just replicate what I observed but it's not the secret, there's a lot more into it to make it work and I'm not a fan of manually patching things that will break in the future.\n\nWas interesting to read about high throughput websites compiling their most accessed pages and articles to reduce costs and be overall faster and gain higher rank at search engines though.\n\nNumber 1 is what I tried later and hooray! Problem solved without any downsides or big code changes, it's almost like they made this feature for me! A pillar to making static pages in Github Pages.","hidden":false,"published":"2023-12-04"},{"_id":"2023-11-16-github-actions.md","userId":0,"title":"Github Actions is impressive","content":"I had few job oppotunities arriving at my LinkedIn page recently for DevOps careers and I realized I'm not well acquainted with the variety of tools out there - I've only been using Travis (really simple things) and the in-house solution my company is doing at the moment.\n\nI didn't know what to expect but was definitely surprised to see how fast and relatively easy I was able to pull this together.\nI still want to use my own steps instead of copying from another user but for a starter this is fine.\nGood thing is that I don't need to run my own static builds anymore, nor do I have to commit to the master branch!\n\n![yanameThink](https://cdn.frankerfacez.com/emoticon/235964/4)","hidden":false,"published":"2023-11-16"},{"_id":"2023-11-15-compiling-static-posts.md","userId":0,"title":"Why did I make a static version of this feature-rich blog?","content":"#### How does the static version work?\n- I created an Angular environment called \"static\" that will make functions like [\"fetching posts\"](https://github.com/parklez/blog/commit/3077856fa84ce1a038bed5bfc336ef53b3615497#diff-09332a8008ef020b3debfe12146fc06830c396342256f440176e66ebe8863ca7) to call for local \"MongoDB\"-like paylods.\n- I then wrote this [script](https://github.com/parklez/blog/commit/3077856fa84ce1a038bed5bfc336ef53b3615497#diff-b4129de25ae7aeb8dc1f859f0654702b1cacbcaec1d5fb9f50d562ce363a6c45) to compile posts in a similar fashion that Jekyll does but outputs in the format I mentioned above.\n\nWith these 2 changes alone, I can continue to maintain the \"fully-featured\" version of my blog while having this one with ZERO maintenance, clever huh?\n\n![shibawink](https://cdn.frankerfacez.com/emoticon/224668/2)\n\n#### Lore\nI work with several technologies at work and I decided that I needed to show off what I can do with all the tools I've learned over the several months using the Udemy courses I had available, and why not by making a fully featured blog? Well that was great for putting my learning into fruition however I knew this is just a tiny piece of sand in the universe and it's not meant to be alive in the sense that people will WANT to come and see anything in here.\n\nI spent quite a while looking at other people's personal pages seeing what I could borrow from them with their cool unique URLs but the fact that hosting is expensive and just a pile of burning money for me üí∏ - I decided to ~~leech~~ utilize the free tools available out there to start off.\n\n![mokou](https://cdn.frankerfacez.com/emoticon/248549/4)\n\n\n---\nHere's a list of links I used for reference:\n- Angular documentation\nhttps://angular.io/guide/deployment#deployment\nhttps://github.com/angular-schule/angular-cli-ghpages\n\n- Possible fixes\nhttps://stackoverflow.com/questions/75644587/angular-website-hosted-in-github-pages-does-not-work-if-i-refresh-in-any-route\nhttps://stackoverflow.com/questions/73264184/angular-github-io-routing-results-in-404\n\n- Might not be possible using Angular SSR\nhttps://stackoverflow.com/questions/51909059/deploying-angular-universal-on-github-pages\n\n- Good examples\nhttps://dalenguyen.me/blog/why-i-moved-my-website-from-github-pages-to-heroku-with-a-cost\nhttps://github.com/dalenguyen/dalenguyen.github.io\nhttps://github.com/Gabri432/angular-personal-website/blob/master/scully.angular-personal-website.config.ts\n\n- SSR example\nhttps://github.com/ganatan/angular-ssr\n\n- Reading\nhttps://www.antoinebernard.com/create-a-static-website-with-angular/","hidden":false,"published":"2023-11-15"}],"total":8,"page":0}